import { Button, VerticalBox, GridBox } from "std-widgets.slint";

struct PotentialGalaxy{
    Id: int,
    Populated: bool,
    SystemColor: color
}

component GalaxyTile inherits Rectangle {
    in property <color> bg;
    in property <PotentialGalaxy> galaxy;
    callback clicked();
     
    background: root.galaxy.Populated ? root.galaxy.SystemColor : black;
    
    TouchArea {
        clicked => {
            root.clicked();
        }
        width: 100%;
        height: 100%;
    }
    Text {
        text: root.galaxy.Id;
        visible: false;
    }
    
}

export component AppWindow inherits Window {
    width: 1400px;
    height: 600px;

    in property <[PotentialGalaxy]> galaxy;
    in property <int> num-systems;
    out property <int> row-count: 15;
    out property <int> column-count: 12;
    private property <length> tile-size: 30px;
    private property <length> tile-spacing: 5px;
    

    callback generate-universe();
    callback print-xy(int, int);

    HorizontalLayout {
        VerticalLayout {
            width: 150px;
            padding: 5px;
            Text {
                max-height: 100px;
                text: "Uni.Gen";
                font-size: 36px;
            }
            HorizontalLayout {
                max-height: 60px;
                Text{
                    text: "Num Systems:";
                    font-size: 14px;
                }
                Text{
                    text: num-systems;
                    font-size: 14px;
                    font-weight: 500;
                }
            }
            Button {
                text: "Generate";
                primary: true;
                max-height: 60px;   
                clicked => {generate-universe()}
            }
        }
        VerticalLayout {
            Text {
                text: "Universe";
                font-size: 24px;
                horizontal-alignment: center;
            }
            for idx-x in root.row-count: 
                HorizontalLayout{
                    padding: 2px;
                    for idx-y in root.column-count:
                        GalaxyTile {
                            clicked => {
                                root.print-xy(idx-x,idx-y);
                            }
                            
                            border-width: 2px;
                            border-color: yellow;
                            width: 30px;
                            height: 30px;
                            galaxy: root.galaxy[root.column-count * idx-x + idx-y];
                        }
                }
            
        }
        VerticalLayout {
            min-width: 450px;
            Text { 
                text: "System View";
                font-size: 24px;
                horizontal-alignment: center;
            }
            HorizontalLayout {
                Rectangle {
                    width: 100%;
                    height: 100%;
                    background: lightgray;
                }
                Rectangle {
                    border-radius: root.width / 2;
                    border-width: 10px;
                    border-color: orange;
                    visible: true;
                }
            }
        }
    }
}
